#include <algorithm>
#include <charconv>
#include <iostream>
#include <regex>
#include <vector>

// –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —á–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ.
// –î–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –ø–æ—Å—Ç—Ä–æ—á–Ω–æ. –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ç—Ä–µ—Ö –ø–æ–ª–µ–π, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ–¥–Ω–∏–º —Å–∏–º–≤–æ–ª–æ–º —Ç–∞–±—É–ª—è—Ü–∏–∏, –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —Å–∏–º–≤–æ–ª–æ–º –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–æ–∫–∏.

// **–§–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏:**
//
// text1 \\t text2 \\t text3
//
// –ü–æ–ª—è text2 –∏ text3 –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è. –ü–æ–ª–µ text1 –∏–º–µ–µ—Ç —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É (ip4 address):
//
// n1.n2.n3.n4 –≥–¥–µ n1..4 ‚Äì —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 255.
//
// –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ ip-–∞–¥—Ä–µ—Å–æ–≤ –≤ –ø–∞–º—è—Ç—å –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ. –ü—Ä–∏–º–µ—Ä –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–ø–æ –ø–µ—Ä–≤–æ–º—É —á–∏—Å–ª—É, –∑–∞—Ç–µ–º –ø–æ –≤—Ç–æ—Ä–æ–º—É –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ):
//
// 1\.1.1.1 1.2.1.1 1.10.1.1
//
// –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ, –æ–±—Ä–∞—Ç–Ω–∞—è:
//
// 1\.10.1.1 1.2.1.1 1.1.1.1
//
// üí° –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ ‚Äì —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –±–∞–π—Ç–æ–≤–æ–º (—á–∏—Å–ª–µ–Ω–Ω–æ–º) –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ IP-–∞–¥—Ä–µ—Å–∞, –∞ –Ω–µ –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º. –ü–æ—ç—Ç–æ–º—É –∞–¥—Ä–µ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä, 1.2.1.1 –º–µ–Ω—å—à–µ –∞–¥—Ä–µ—Å–∞ 1.10.1.1 (–≤–µ–¥—å 2 < 10).
//
// **–î–∞–ª–µ–µ –≤—ã–≤–æ–¥–∏–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥ —Å–ª–µ–¥—É—é—â–µ–µ:**
//
// 1. –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ –ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏. –û–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ - –æ–¥–∏–Ω –∞–¥—Ä–µ—Å.
// 2. –°—Ä–∞–∑—É —Å–ª–µ–¥–æ–º —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤, –ø–µ—Ä–≤—ã–π –±–∞–π—Ç –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–≤–µ–Ω 1. –ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è. –û–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ - –æ–¥–∏–Ω –∞–¥—Ä–µ—Å. –°–ø–∏—Å–∫–∏ –Ω–∏—á–µ–º –Ω–µ —Ä–∞–∑–¥–µ–ª—è—é—Ç—Å—è.
// 3. –°—Ä–∞–∑—É –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤, –ø–µ—Ä–≤—ã–π –±–∞–π—Ç –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–≤–µ–Ω 46, –∞ –≤—Ç–æ—Ä–æ–π 70. –ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è. –û–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ - –æ–¥–∏–Ω –∞–¥—Ä–µ—Å. –°–ø–∏—Å–∫–∏ –Ω–∏—á–µ–º –Ω–µ —Ä–∞–∑–¥–µ–ª—è—é—Ç—Å—è.
// 4. –°—Ä–∞–∑—É –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤, –ª—é–±–æ–π –±–∞–π—Ç –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–≤–µ–Ω 46. –ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è. –û–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ - –æ–¥–∏–Ω –∞–¥—Ä–µ—Å. –°–ø–∏—Å–∫–∏ –Ω–∏—á–µ–º –Ω–µ —Ä–∞–∑–¥–µ–ª—è—é—Ç—Å—è.
std::vector<std::string> split(const std::string& str, const std::string_view delimiter)
{
    std::vector<std::string> result;
    for (size_t start = 0, end; (end = str.find(delimiter, start)) != std::string::npos; start = end + 1)
        result.emplace_back(str.substr(start, end - start));

    result.emplace_back(str.substr(str.find_last_not_of(delimiter)));
    return result;
}

void printIp(const std::vector<std::string> &ips)
{
    for (const auto &ip : ips)
        std::cout << ip << std::endl;
}

std::vector<std::string> filter(const std::string &value, std::vector<std::string> ptr)
{
    std::vector<std::string> result;
    std::regex ipRegex(value);
    std::copy_if(ptr.begin(), ptr.end(),
                 std::back_inserter(result),
                 [ipRegex](const std::string &x) {
                    return std::regex_match(x, ipRegex);
                 });
    return result;
}

int main()
{
    std::vector<std::vector<std::string> > ip_pool;
    for(std::string line; std::getline(std::cin, line);)
    {
        std::vector<std::string> v = split(line, "\t");
        ip_pool.push_back(split(v.at(0), "."));
    }

    std::vector<std::string> ips = {{"1.1.1.1"}, {"46.2.1.1"}, {"1.10.1.1"}, {"1.46.1.1"}};

    std::sort(ips.begin(), ips.end(), [](const std::string &s1, const std::string &s2) {
        const auto tmp1 = split(s1, ".");
        const auto tmp2 = split(s2, ".");

        for (size_t i = 0; i < tmp1.size(); ++i) {
            const auto result = std::stoi(tmp1[i]);
            const auto result2 = std::stoi(tmp2[i]);
            if (result == result2)
                continue;

            return result > result2;
        }
        return false;
    });

    std::cout << "test";
    printIp(ips);
    std::cout << std::endl;
    printIp(filter("^46\\..*", ips));
    std::cout << std::endl;
    printIp(filter(".*46.*", ips));

    return 0;
}